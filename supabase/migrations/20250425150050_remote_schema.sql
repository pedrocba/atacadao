

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."clientes" (
    "cnpj" character varying NOT NULL,
    "razao_social" character varying NOT NULL,
    "nome_fantasia" character varying,
    CONSTRAINT "clientes_cnpj_check" CHECK ((("cnpj")::"text" ~ '^[0-9]{14}$'::"text"))
);


ALTER TABLE "public"."clientes" OWNER TO "postgres";


COMMENT ON TABLE "public"."clientes" IS 'Armazena os dados básicos dos clientes PJ da distribuidora (pré-carregado).';



COMMENT ON COLUMN "public"."clientes"."cnpj" IS 'CNPJ do cliente (chave primária), formato 14 dígitos.';



COMMENT ON COLUMN "public"."clientes"."razao_social" IS 'Razão Social do cliente.';



COMMENT ON COLUMN "public"."clientes"."nome_fantasia" IS 'Nome Fantasia do cliente.';



CREATE TABLE IF NOT EXISTS "public"."cupons" (
    "id" bigint NOT NULL,
    "num_nota" character varying NOT NULL,
    "cnpj" character varying NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "nota_fiscal_id" bigint,
    "sorteado_em" timestamp with time zone
);


ALTER TABLE "public"."cupons" OWNER TO "postgres";


COMMENT ON TABLE "public"."cupons" IS 'Armazena os cupons gerados a partir das notas fiscais validadas.';



COMMENT ON COLUMN "public"."cupons"."id" IS 'ID único do cupom (auto-incremento).';



COMMENT ON COLUMN "public"."cupons"."num_nota" IS 'Número da NF que gerou o cupom.';



COMMENT ON COLUMN "public"."cupons"."cnpj" IS 'CNPJ do cliente dono do cupom (referencia clientes.cnpj).';



COMMENT ON COLUMN "public"."cupons"."created_at" IS 'Data/Hora de geração do cupom.';



COMMENT ON COLUMN "public"."cupons"."nota_fiscal_id" IS 'Referência opcional ao ID da nota fiscal original.';



COMMENT ON COLUMN "public"."cupons"."sorteado_em" IS 'Timestamp de quando o cupom foi sorteado (NULL se não sorteado).';



ALTER TABLE "public"."cupons" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."cupons_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."notas_fiscais" (
    "id" bigint NOT NULL,
    "num_nota" character varying NOT NULL,
    "cnpj" character varying NOT NULL,
    "valor" numeric(10,2),
    "data_emissao" "date",
    "valida" boolean DEFAULT false,
    "motivo" "text",
    "utilizada_para_cupom" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."notas_fiscais" OWNER TO "postgres";


COMMENT ON TABLE "public"."notas_fiscais" IS 'Armazena os dados das notas fiscais elegíveis para a campanha (pré-carregado).';



COMMENT ON COLUMN "public"."notas_fiscais"."id" IS 'ID único da nota fiscal (auto-incremento).';



COMMENT ON COLUMN "public"."notas_fiscais"."num_nota" IS 'Número da Nota Fiscal.';



COMMENT ON COLUMN "public"."notas_fiscais"."cnpj" IS 'CNPJ do cliente emitente/destinatário (referencia clientes.cnpj).';



COMMENT ON COLUMN "public"."notas_fiscais"."valor" IS 'Valor total da NF.';



COMMENT ON COLUMN "public"."notas_fiscais"."data_emissao" IS 'Data de emissão da NF.';



ALTER TABLE "public"."notas_fiscais" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."notas_fiscais_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."sorteios" (
    "id" bigint NOT NULL,
    "cupom_id" bigint NOT NULL,
    "data_sorteio" timestamp with time zone DEFAULT "now"() NOT NULL,
    "admin_user_id" "uuid" NOT NULL
);


ALTER TABLE "public"."sorteios" OWNER TO "postgres";


COMMENT ON TABLE "public"."sorteios" IS 'Armazena o histórico dos sorteios realizados.';



COMMENT ON COLUMN "public"."sorteios"."id" IS 'ID único do sorteio (auto-incremento).';



COMMENT ON COLUMN "public"."sorteios"."cupom_id" IS 'ID do cupom sorteado (referencia cupons.id).';



COMMENT ON COLUMN "public"."sorteios"."data_sorteio" IS 'Data/Hora da realização do sorteio.';



COMMENT ON COLUMN "public"."sorteios"."admin_user_id" IS 'ID do usuário admin que fez o sorteio (referencia usuarios.id).';



ALTER TABLE "public"."sorteios" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."sorteios_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."usuarios" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "whatsapp" character varying NOT NULL,
    "nome" character varying NOT NULL,
    "cpf" character varying,
    "cnpj" character varying NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "role" character varying DEFAULT 'cliente'::character varying NOT NULL,
    CONSTRAINT "usuarios_cpf_check" CHECK ((("cpf")::"text" ~ '^[0-9]{11}$'::"text")),
    CONSTRAINT "usuarios_role_check" CHECK ((("role")::"text" = ANY ((ARRAY['cliente'::character varying, 'admin'::character varying])::"text"[])))
);


ALTER TABLE "public"."usuarios" OWNER TO "postgres";


COMMENT ON TABLE "public"."usuarios" IS 'Armazena os dados dos usuários que se cadastraram para participar da campanha.';



COMMENT ON COLUMN "public"."usuarios"."id" IS 'ID único do usuário (referencia auth.users.id).';



COMMENT ON COLUMN "public"."usuarios"."whatsapp" IS 'Número do WhatsApp para login OTP (único).';



COMMENT ON COLUMN "public"."usuarios"."nome" IS 'Nome do responsável.';



COMMENT ON COLUMN "public"."usuarios"."cpf" IS 'CPF do responsável (único), formato 11 dígitos.';



COMMENT ON COLUMN "public"."usuarios"."cnpj" IS 'CNPJ do cliente associado (referencia clientes.cnpj).';



COMMENT ON COLUMN "public"."usuarios"."created_at" IS 'Data/Hora de criação do registro.';



COMMENT ON COLUMN "public"."usuarios"."role" IS 'Papel do usuário (cliente ou admin).';



ALTER TABLE ONLY "public"."clientes"
    ADD CONSTRAINT "clientes_pkey" PRIMARY KEY ("cnpj");



ALTER TABLE ONLY "public"."cupons"
    ADD CONSTRAINT "cupons_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."notas_fiscais"
    ADD CONSTRAINT "notas_fiscais_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."sorteios"
    ADD CONSTRAINT "sorteios_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."usuarios"
    ADD CONSTRAINT "usuarios_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."usuarios"
    ADD CONSTRAINT "usuarios_whatsapp_key" UNIQUE ("whatsapp");



CREATE INDEX "idx_cupons_cnpj" ON "public"."cupons" USING "btree" ("cnpj");



CREATE INDEX "idx_cupons_nao_sorteados" ON "public"."cupons" USING "btree" ("sorteado_em") WHERE ("sorteado_em" IS NULL);



CREATE INDEX "idx_notas_fiscais_cnpj" ON "public"."notas_fiscais" USING "btree" ("cnpj");



CREATE INDEX "idx_notas_fiscais_num_nota_cnpj" ON "public"."notas_fiscais" USING "btree" ("num_nota", "cnpj");



CREATE INDEX "idx_notas_fiscais_utilizada_para_cupom" ON "public"."notas_fiscais" USING "btree" ("utilizada_para_cupom");



CREATE INDEX "idx_sorteios_admin" ON "public"."sorteios" USING "btree" ("admin_user_id");



CREATE INDEX "idx_sorteios_data" ON "public"."sorteios" USING "btree" ("data_sorteio");



ALTER TABLE ONLY "public"."cupons"
    ADD CONSTRAINT "cupons_cnpj_fkey" FOREIGN KEY ("cnpj") REFERENCES "public"."clientes"("cnpj") ON UPDATE CASCADE;



ALTER TABLE ONLY "public"."cupons"
    ADD CONSTRAINT "cupons_nota_fiscal_id_fkey" FOREIGN KEY ("nota_fiscal_id") REFERENCES "public"."notas_fiscais"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."notas_fiscais"
    ADD CONSTRAINT "notas_fiscais_cnpj_fkey" FOREIGN KEY ("cnpj") REFERENCES "public"."clientes"("cnpj") ON UPDATE CASCADE;



ALTER TABLE ONLY "public"."sorteios"
    ADD CONSTRAINT "sorteios_admin_user_id_fkey" FOREIGN KEY ("admin_user_id") REFERENCES "public"."usuarios"("id");



ALTER TABLE ONLY "public"."sorteios"
    ADD CONSTRAINT "sorteios_cupom_id_fkey" FOREIGN KEY ("cupom_id") REFERENCES "public"."cupons"("id") ON DELETE CASCADE;



CREATE POLICY "Allow admins to insert sorteios" ON "public"."sorteios" FOR INSERT WITH CHECK (((( SELECT "usuarios"."role"
   FROM "public"."usuarios"
  WHERE ("usuarios"."id" = "auth"."uid"())))::"text" = 'admin'::"text"));



CREATE POLICY "Allow admins to update all users" ON "public"."usuarios" FOR UPDATE USING (((( SELECT "usuarios_1"."role"
   FROM "public"."usuarios" "usuarios_1"
  WHERE ("usuarios_1"."id" = "auth"."uid"())))::"text" = 'admin'::"text")) WITH CHECK (((( SELECT "usuarios_1"."role"
   FROM "public"."usuarios" "usuarios_1"
  WHERE ("usuarios_1"."id" = "auth"."uid"())))::"text" = 'admin'::"text"));



CREATE POLICY "Allow admins to update cupons" ON "public"."cupons" FOR UPDATE USING (((( SELECT "usuarios"."role"
   FROM "public"."usuarios"
  WHERE ("usuarios"."id" = "auth"."uid"())))::"text" = 'admin'::"text")) WITH CHECK (((( SELECT "usuarios"."role"
   FROM "public"."usuarios"
  WHERE ("usuarios"."id" = "auth"."uid"())))::"text" = 'admin'::"text"));



CREATE POLICY "Allow admins to view all NFs" ON "public"."notas_fiscais" FOR SELECT USING (((( SELECT "usuarios"."role"
   FROM "public"."usuarios"
  WHERE ("usuarios"."id" = "auth"."uid"())))::"text" = 'admin'::"text"));



CREATE POLICY "Allow admins to view all cupons" ON "public"."cupons" FOR SELECT USING (((( SELECT "usuarios"."role"
   FROM "public"."usuarios"
  WHERE ("usuarios"."id" = "auth"."uid"())))::"text" = 'admin'::"text"));



CREATE POLICY "Allow admins to view all sorteios" ON "public"."sorteios" FOR SELECT USING (((( SELECT "usuarios"."role"
   FROM "public"."usuarios"
  WHERE ("usuarios"."id" = "auth"."uid"())))::"text" = 'admin'::"text"));



CREATE POLICY "Allow admins to view all users" ON "public"."usuarios" FOR SELECT USING (((( SELECT "usuarios_1"."role"
   FROM "public"."usuarios" "usuarios_1"
  WHERE ("usuarios_1"."id" = "auth"."uid"())))::"text" = 'admin'::"text"));



CREATE POLICY "Allow authenticated users to update own data" ON "public"."usuarios" FOR UPDATE USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Allow authenticated users to view own data" ON "public"."usuarios" FOR SELECT USING (("auth"."uid"() = "id"));



CREATE POLICY "Allow clients to view own NFs" ON "public"."notas_fiscais" FOR SELECT USING ((("cnpj")::"text" = (( SELECT "usuarios"."cnpj"
   FROM "public"."usuarios"
  WHERE ("usuarios"."id" = "auth"."uid"())))::"text"));



CREATE POLICY "Allow clients to view own cupons" ON "public"."cupons" FOR SELECT USING ((("cnpj")::"text" = (( SELECT "usuarios"."cnpj"
   FROM "public"."usuarios"
  WHERE ("usuarios"."id" = "auth"."uid"())))::"text"));



CREATE POLICY "Allow clients to view own winning sorteios" ON "public"."sorteios" FOR SELECT USING (("cupom_id" IN ( SELECT "cupons"."id"
   FROM "public"."cupons"
  WHERE (("cupons"."cnpj")::"text" = (( SELECT "usuarios"."cnpj"
           FROM "public"."usuarios"
          WHERE ("usuarios"."id" = "auth"."uid"())))::"text"))));



CREATE POLICY "Allow service role to insert cupons" ON "public"."cupons" FOR INSERT WITH CHECK (true);



CREATE POLICY "Allow service role to insert users" ON "public"."usuarios" FOR INSERT WITH CHECK (true);



ALTER TABLE "public"."cupons" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."notas_fiscais" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."sorteios" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


























































































































































































GRANT ALL ON TABLE "public"."clientes" TO "anon";
GRANT ALL ON TABLE "public"."clientes" TO "authenticated";
GRANT ALL ON TABLE "public"."clientes" TO "service_role";



GRANT ALL ON TABLE "public"."cupons" TO "anon";
GRANT ALL ON TABLE "public"."cupons" TO "authenticated";
GRANT ALL ON TABLE "public"."cupons" TO "service_role";



GRANT ALL ON SEQUENCE "public"."cupons_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."cupons_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."cupons_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."notas_fiscais" TO "anon";
GRANT ALL ON TABLE "public"."notas_fiscais" TO "authenticated";
GRANT ALL ON TABLE "public"."notas_fiscais" TO "service_role";



GRANT ALL ON SEQUENCE "public"."notas_fiscais_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."notas_fiscais_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."notas_fiscais_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."sorteios" TO "anon";
GRANT ALL ON TABLE "public"."sorteios" TO "authenticated";
GRANT ALL ON TABLE "public"."sorteios" TO "service_role";



GRANT ALL ON SEQUENCE "public"."sorteios_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."sorteios_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."sorteios_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."usuarios" TO "anon";
GRANT ALL ON TABLE "public"."usuarios" TO "authenticated";
GRANT ALL ON TABLE "public"."usuarios" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;

CREATE POLICY "Allow admins to insert NFs" ON "public"."notas_fiscais" FOR INSERT WITH CHECK (((( SELECT "usuarios"."role"
   FROM "public"."usuarios"
  WHERE ("usuarios"."id" = "auth"."uid"())))::"text" = 'admin'::"text"));
